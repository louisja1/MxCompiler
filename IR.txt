func shift_l(x, n) { 
	shift_l.0.enter :
		mov $x(null) $t353(rdi)
		mov $n(null) $t354(rsi)
		mov $t355(null) $x(null)
		SHL $t355(null) $n(null)
		mov $t357(rdi) 65535
		mov $t358(rsi) 65535
		call hilo
		mov $t359(null) $t356(rax)
		mov $t360(null) $t355(null)
		AND $t360(null) $t359(null)
		ret $t360(null)
		jump shift_l.1.exit
	shift_l.1.exit :
}
func hilo(hi, lo) { 
	hilo.0.enter :
		mov $hi(null) $t361(rdi)
		mov $lo(null) $t362(rsi)
		mov $t363(null) $hi(null)
		SHL $t363(null) 16
		mov $t364(null) $lo(null)
		OR $t364(null) $t363(null)
		ret $t364(null)
		jump hilo.1.exit
	hilo.1.exit :
}
func int2chr(x) { 
	int2chr.0.enter :
		mov $x(null) $t365(rdi)
		cmp $x(null) 32
		set GREQ $t366(null)
		cmp $t366(null) 1
		cjump EQ int2chr.1.logic_true
		jump int2chr.2.logic_false
	int2chr.1.logic_true :
		cmp $x(null) 126
		set LEEQ $t368(null)
		mov $t367(null) $t368(null)
		jump int2chr.3.logic_exit
	int2chr.2.logic_false :
		mov $t367(null) 0
		jump int2chr.3.logic_exit
	int2chr.3.logic_exit :
		cmp $t367(null) 1
		cjump EQ int2chr.4.if_true
		jump int2chr.5.if_false
	int2chr.4.if_true :
		mov $t369(null) $x(null)
		SUB $t369(null) 32
		mov $t370(null) $x(null)
		SUB $t370(null) 32
		mov $t372(rdi) Address($asciiTable(@asciiTable) + 0)
		mov $t373(rsi) $t369(null)
		mov $t374(rdx) $t370(null)
		call _builtin_substring
		mov $t375(null) $t371(rax)
		ret $t375(null)
		jump int2chr.7.exit
	int2chr.5.if_false :
		jump int2chr.6.if_exit
	int2chr.6.if_exit :
		ret _string_constant_7
		jump int2chr.7.exit
	int2chr.7.exit :
}
void assert(expression) { 
	assert.0.enter :
		mov $expression(null) $t264(rdi)
		mov $t265(null) $expression(null)
		cmp $t265(null) 1
		set NEQ $t265(null)
		cmp $t265(null) 1
		cjump EQ assert.1.if_true
		jump assert.2.if_false
	assert.1.if_true :
		mov $t266(rdi) _string_constant_5
		call println
		jump assert.3.if_exit
	assert.2.if_false :
		jump assert.3.if_exit
	assert.3.if_exit :
		jump assert.4.exit
	assert.4.exit :
}
void @GlobalDeclaration() { 
	@GlobalDeclaration.0.enter :
		mov Address($asciiTable(@asciiTable) + 0) _string_constant_8
		jump @GlobalDeclaration.1.exit
	@GlobalDeclaration.1.exit :
}
func shift_r(x, n) { 
	shift_r.0.enter :
		mov $x(null) $t298(rdi)
		mov $n(null) $t299(rsi)
		mov $t301(rdi) 32767
		mov $t302(rsi) 65535
		call hilo
		mov $t303(null) $t300(rax)
		mov $tmp(null) $t303(null)
		mov $t304(null) $tmp(null)
		SHR $t304(null) $n(null)
		mov $t305(null) $t304(null)
		SHL $t305(null) 1
		mov $t306(null) $t305(null)
		ADD $t306(null) 1
		mov $tmp(null) $t306(null)
		mov $t307(null) $x(null)
		SHR $t307(null) $n(null)
		mov $t308(null) $tmp(null)
		AND $t308(null) $t307(null)
		mov $tmp(null) $t308(null)
		mov $t310(rdi) 65535
		mov $t311(rsi) 65535
		call hilo
		mov $t312(null) $t309(rax)
		mov $t313(null) $tmp(null)
		AND $t313(null) $t312(null)
		ret $t313(null)
		jump shift_r.1.exit
	shift_r.1.exit :
}
func xorshift(seed) { 
	xorshift.0.enter :
		mov $seed(null) $t314(rdi)
		mov $x(null) $seed(null)
		mov $t316(rdi) $x(null)
		mov $t317(rsi) 13
		call shift_l
		mov $t318(null) $t315(rax)
		mov $t319(null) $x(null)
		XOR $t319(null) $t318(null)
		mov $x(null) $t319(null)
		mov $t321(rdi) $x(null)
		mov $t322(rsi) 17
		call shift_r
		mov $t323(null) $t320(rax)
		mov $t324(null) $x(null)
		XOR $t324(null) $t323(null)
		mov $x(null) $t324(null)
		mov $t326(rdi) $x(null)
		mov $t327(rsi) 5
		call shift_l
		mov $t328(null) $t325(rax)
		mov $t329(null) $x(null)
		XOR $t329(null) $t328(null)
		mov $x(null) $t329(null)
		ret $x(null)
		jump xorshift.1.exit
	xorshift.1.exit :
}
func main() { 
	main.0.enter :
		call getInt
		mov $t1(null) $t0(rax)
		mov $seed(null) $t1(null)
		call getInt
		mov $t3(null) $t2(rax)
		mov $l(null) $t3(null)
		call getInt
		mov $t5(null) $t4(rax)
		mov $r(null) $t5(null)
		call getInt
		mov $t7(null) $t6(rax)
		mov $P(null) $t7(null)
		mov $t8(null) $seed(null)
		ADD $t8(null) 1
		mov $t10(rdi) $t8(null)
		call xorshift10
		mov $t11(null) $t9(rax)
		mov $seed(null) $t11(null)
		mov $t13(rdi) 32767
		mov $t14(rsi) 65535
		call hilo
		mov $t15(null) $t12(rax)
		mov $INT_MAX(null) $t15(null)
		mov $r1(null) 0
		mov $r2(null) 0
		mov $r3(null) 0
		mov $r4(null) 0
		mov $d(null) 0
		mov $i(null) $l(null)
		jump main.1.loop_condition
	main.1.loop_condition :
		cmp $i(null) $r(null)
		set LE $t16(null)
		cmp $t16(null) 1
		cjump EQ main.2.loop_body
		jump main.13.loop_exit
	main.2.loop_body :
		mov $t18(rdi) $seed(null)
		call xorshift
		mov $t19(null) $t17(rax)
		mov $seed(null) $t19(null)
		mov $t20(null) $seed(null)
		AND $t20(null) $INT_MAX(null)
		mov $v1(null) $t20(null)
		mov $t22(rdi) $seed(null)
		call xorshift
		mov $t23(null) $t21(rax)
		mov $seed(null) $t23(null)
		mov $t24(null) $seed(null)
		AND $t24(null) $INT_MAX(null)
		mov $v2(null) $t24(null)
		mov $t26(rdi) $seed(null)
		call xorshift
		mov $t27(null) $t25(rax)
		mov $seed(null) $t27(null)
		mov $t28(null) $seed(null)
		AND $t28(null) $INT_MAX(null)
		mov $v3(null) $t28(null)
		mov $t30(rdi) $seed(null)
		call xorshift
		mov $t31(null) $t29(rax)
		mov $seed(null) $t31(null)
		mov $t32(null) $seed(null)
		AND $t32(null) $INT_MAX(null)
		mov $v4(null) $t32(null)
		mov $t34(rdi) $seed(null)
		call xorshift
		mov $t35(null) $t33(rax)
		mov $seed(null) $t35(null)
		mov $t36(null) $seed(null)
		AND $t36(null) $INT_MAX(null)
		mov $v5(null) $t36(null)
		mov $t38(rdi) $seed(null)
		call xorshift
		mov $t39(null) $t37(rax)
		mov $seed(null) $t39(null)
		mov $t40(null) $seed(null)
		AND $t40(null) $INT_MAX(null)
		mov $v6(null) $t40(null)
		mov $t41(null) $v1(null)
		XOR $t41(null) $v2(null)
		mov $t42(null) $t41(null)
		XOR $t42(null) $v3(null)
		mov $a1(null) $t42(null)
		mov $t43(null) $v4(null)
		XOR $t43(null) $v5(null)
		mov $t44(null) $t43(null)
		XOR $t44(null) $v6(null)
		mov $t45(null) $a1(null)
		XOR $t45(null) $t44(null)
		mov $a1(null) $t45(null)
		mov $t46(null) $a1(null)
		AND $t46(null) $INT_MAX(null)
		mov $a1(null) $t46(null)
		mov $t47(null) $v1(null)
		ADD $t47(null) $v2(null)
		mov $t48(null) $t47(null)
		ADD $t48(null) $v3(null)
		mov $t49(null) $t48(null)
		ADD $t49(null) 1
		mov $a2(null) $t49(null)
		mov $t50(null) $v4(null)
		ADD $t50(null) $v5(null)
		mov $t51(null) $t50(null)
		ADD $t51(null) $v6(null)
		mov $t52(null) $a2(null)
		SUB $t52(null) $t51(null)
		mov $a2(null) $t52(null)
		mov $t53(null) $a2(null)
		AND $t53(null) $INT_MAX(null)
		mov $a2(null) $t53(null)
		mov $t54(null) $v1(null)
		MOD $t54(null) $P(null)
		mov $t55(null) $v2(null)
		MOD $t55(null) $P(null)
		mov $t56(null) $t54(null)
		MUL $t56(null) $t55(null)
		mov $t57(null) $v3(null)
		MOD $t57(null) $P(null)
		mov $t58(null) $t56(null)
		MUL $t58(null) $t57(null)
		mov $a3(null) $t58(null)
		mov $t59(null) $v4(null)
		MOD $t59(null) $P(null)
		mov $t60(null) $a3(null)
		MUL $t60(null) $t59(null)
		mov $t61(null) $v5(null)
		MOD $t61(null) $P(null)
		mov $t62(null) $t60(null)
		MUL $t62(null) $t61(null)
		mov $t63(null) $v6(null)
		MOD $t63(null) $P(null)
		mov $t64(null) $t62(null)
		MUL $t64(null) $t63(null)
		mov $a3(null) $t64(null)
		mov $t65(null) $a3(null)
		AND $t65(null) $INT_MAX(null)
		mov $a3(null) $t65(null)
		mov $t66(null) $v1(null)
		XOR $t66(null) $v2(null)
		mov $t67(null) $t66(null)
		XOR $t67(null) $v3(null)
		mov $t68(null) $v4(null)
		XOR $t68(null) $v5(null)
		mov $t69(null) $t68(null)
		XOR $t69(null) $v6(null)
		cmp $t67(null) $t69(null)
		set GR $t70(null)
		cmp $t70(null) 1
		cjump EQ main.3.if_true
		jump main.4.if_false
	main.3.if_true :
		mov $t71(null) $v1(null)
		ADD $t71(null) $v2(null)
		mov $t72(null) $t71(null)
		AND $t72(null) $INT_MAX(null)
		mov $t73(null) $t72(null)
		MOD $t73(null) $P(null)
		mov $t74(null) $v3(null)
		MOD $t74(null) $P(null)
		mov $t75(null) $t74(null)
		ADD $t75(null) 1
		mov $t76(null) $t73(null)
		MOD $t76(null) $t75(null)
		mov $a4(null) $t76(null)
		jump main.5.if_exit
	main.4.if_false :
		mov $t77(null) $v3(null)
		ADD $t77(null) $v2(null)
		mov $t78(null) $t77(null)
		AND $t78(null) $INT_MAX(null)
		mov $t79(null) $t78(null)
		MOD $t79(null) $P(null)
		mov $t80(null) $v1(null)
		MOD $t80(null) $P(null)
		mov $t81(null) $t80(null)
		ADD $t81(null) 1
		mov $t82(null) $t79(null)
		MOD $t82(null) $t81(null)
		mov $a4(null) $t82(null)
		jump main.5.if_exit
	main.5.if_exit :
		mov $t83(null) $a1(null)
		XOR $t83(null) 10001
		mov $t85(rdi) $t83(null)
		call xorshift10
		mov $t86(null) $t84(rax)
		mov $t87(null) $r1(null)
		ADD $t87(null) $t86(null)
		mov $r1(null) $t87(null)
		mov $t88(null) $a2(null)
		XOR $t88(null) 10002
		mov $t90(rdi) $t88(null)
		call xorshift10
		mov $t91(null) $t89(rax)
		mov $t92(null) $r2(null)
		ADD $t92(null) $t91(null)
		mov $r2(null) $t92(null)
		mov $t93(null) $a3(null)
		XOR $t93(null) 10003
		mov $t95(rdi) $t93(null)
		call xorshift10
		mov $t96(null) $t94(rax)
		mov $t97(null) $r3(null)
		ADD $t97(null) $t96(null)
		mov $r3(null) $t97(null)
		mov $t98(null) $a4(null)
		XOR $t98(null) 10004
		mov $t100(rdi) $t98(null)
		call xorshift10
		mov $t101(null) $t99(rax)
		mov $t102(null) $r4(null)
		ADD $t102(null) $t101(null)
		mov $r4(null) $t102(null)
		mov $t103(null) $v4(null)
		XOR $t103(null) $v2(null)
		mov $t104(null) $t103(null)
		XOR $t104(null) $v3(null)
		mov $b1(null) $t104(null)
		mov $t105(null) $b1(null)
		XOR $t105(null) $v1(null)
		mov $t106(null) $t105(null)
		XOR $t106(null) $v6(null)
		mov $t107(null) $t106(null)
		XOR $t107(null) $v5(null)
		mov $b1(null) $t107(null)
		mov $t108(null) $b1(null)
		AND $t108(null) $INT_MAX(null)
		mov $b1(null) $t108(null)
		mov $t109(null) $v4(null)
		NEG $t109(null)
		mov $t110(null) $t109(null)
		ADD $t110(null) $v2(null)
		mov $t111(null) $t110(null)
		ADD $t111(null) $v3(null)
		mov $b2(null) $t111(null)
		mov $t112(null) $b2(null)
		ADD $t112(null) $v1(null)
		mov $t113(null) $t112(null)
		SUB $t113(null) $v6(null)
		mov $t114(null) $t113(null)
		SUB $t114(null) $v5(null)
		mov $t115(null) $t114(null)
		ADD $t115(null) 1
		mov $b2(null) $t115(null)
		mov $t116(null) $b2(null)
		AND $t116(null) $INT_MAX(null)
		mov $b2(null) $t116(null)
		mov $t117(null) $v4(null)
		MOD $t117(null) $P(null)
		mov $t118(null) $v2(null)
		MOD $t118(null) $P(null)
		mov $t119(null) $t117(null)
		MUL $t119(null) $t118(null)
		mov $t120(null) $v3(null)
		MOD $t120(null) $P(null)
		mov $t121(null) $t119(null)
		MUL $t121(null) $t120(null)
		mov $b3(null) $t121(null)
		mov $t122(null) $v1(null)
		MOD $t122(null) $P(null)
		mov $t123(null) $b3(null)
		MUL $t123(null) $t122(null)
		mov $t124(null) $v6(null)
		MOD $t124(null) $P(null)
		mov $t125(null) $t123(null)
		MUL $t125(null) $t124(null)
		mov $t126(null) $v5(null)
		MOD $t126(null) $P(null)
		mov $t127(null) $t125(null)
		MUL $t127(null) $t126(null)
		mov $b3(null) $t127(null)
		mov $t128(null) $b3(null)
		AND $t128(null) $INT_MAX(null)
		mov $b3(null) $t128(null)
		mov $t129(null) $v1(null)
		XOR $t129(null) $v2(null)
		mov $t130(null) $t129(null)
		XOR $t130(null) $v3(null)
		mov $t131(null) $v4(null)
		XOR $t131(null) $v5(null)
		mov $t132(null) $t131(null)
		XOR $t132(null) $v6(null)
		cmp $t130(null) $t132(null)
		set LEEQ $t133(null)
		cmp $t133(null) 1
		cjump EQ main.6.if_true
		jump main.7.if_false
	main.6.if_true :
		mov $t134(null) $v3(null)
		ADD $t134(null) $v2(null)
		mov $t135(null) $t134(null)
		AND $t135(null) $INT_MAX(null)
		mov $t136(null) $t135(null)
		MOD $t136(null) $P(null)
		mov $t137(null) $v1(null)
		MOD $t137(null) $P(null)
		mov $t138(null) $t137(null)
		ADD $t138(null) 1
		mov $t139(null) $t136(null)
		MOD $t139(null) $t138(null)
		mov $b4(null) $t139(null)
		jump main.8.if_exit
	main.7.if_false :
		mov $t140(null) $v1(null)
		ADD $t140(null) $v2(null)
		mov $t141(null) $t140(null)
		AND $t141(null) $INT_MAX(null)
		mov $t142(null) $t141(null)
		MOD $t142(null) $P(null)
		mov $t143(null) $v3(null)
		MOD $t143(null) $P(null)
		mov $t144(null) $t143(null)
		ADD $t144(null) 1
		mov $t145(null) $t142(null)
		MOD $t145(null) $t144(null)
		mov $b4(null) $t145(null)
		jump main.8.if_exit
	main.8.if_exit :
		mov $t146(null) $b1(null)
		XOR $t146(null) 10001
		mov $t148(rdi) $t146(null)
		call xorshift10
		mov $t149(null) $t147(rax)
		mov $t150(null) $r1(null)
		ADD $t150(null) $t149(null)
		mov $r1(null) $t150(null)
		mov $t151(null) $b2(null)
		XOR $t151(null) 10002
		mov $t153(rdi) $t151(null)
		call xorshift10
		mov $t154(null) $t152(rax)
		mov $t155(null) $r2(null)
		ADD $t155(null) $t154(null)
		mov $r2(null) $t155(null)
		mov $t156(null) $b3(null)
		XOR $t156(null) 10003
		mov $t158(rdi) $t156(null)
		call xorshift10
		mov $t159(null) $t157(rax)
		mov $t160(null) $r3(null)
		ADD $t160(null) $t159(null)
		mov $r3(null) $t160(null)
		mov $t161(null) $b4(null)
		XOR $t161(null) 10004
		mov $t163(rdi) $t161(null)
		call xorshift10
		mov $t164(null) $t162(rax)
		mov $t165(null) $r4(null)
		ADD $t165(null) $t164(null)
		mov $r4(null) $t165(null)
		mov $t166(null) $v4(null)
		XOR $t166(null) $v1(null)
		mov $t167(null) $t166(null)
		XOR $t167(null) $v3(null)
		mov $c1(null) $t167(null)
		mov $t168(null) $c1(null)
		XOR $t168(null) $v2(null)
		mov $t169(null) $t168(null)
		XOR $t169(null) $v6(null)
		mov $t170(null) $t169(null)
		XOR $t170(null) $v5(null)
		mov $c1(null) $t170(null)
		mov $t171(null) $c1(null)
		AND $t171(null) $INT_MAX(null)
		mov $c1(null) $t171(null)
		mov $t172(null) $v4(null)
		SUB $t172(null) $v2(null)
		mov $t173(null) $v3(null)
		NEG $t173(null)
		mov $t174(null) $t172(null)
		ADD $t174(null) $t173(null)
		mov $c2(null) $t174(null)
		mov $t175(null) $c2(null)
		SUB $t175(null) $v1(null)
		mov $t176(null) $t175(null)
		ADD $t176(null) $v6(null)
		mov $t177(null) $t176(null)
		ADD $t177(null) $v5(null)
		mov $t178(null) $t177(null)
		SUB $t178(null) 1
		mov $c2(null) $t178(null)
		mov $t179(null) $c2(null)
		NEG $t179(null)
		mov $t180(null) $t179(null)
		AND $t180(null) $INT_MAX(null)
		mov $c2(null) $t180(null)
		mov $t181(null) $v4(null)
		MOD $t181(null) $P(null)
		mov $t182(null) $v5(null)
		MOD $t182(null) $P(null)
		mov $t183(null) $t181(null)
		MUL $t183(null) $t182(null)
		mov $t184(null) $v6(null)
		MOD $t184(null) $P(null)
		mov $t185(null) $t183(null)
		MUL $t185(null) $t184(null)
		mov $c3(null) $t185(null)
		mov $t186(null) $v1(null)
		MOD $t186(null) $P(null)
		mov $t187(null) $c3(null)
		MUL $t187(null) $t186(null)
		mov $t188(null) $v2(null)
		MOD $t188(null) $P(null)
		mov $t189(null) $t187(null)
		MUL $t189(null) $t188(null)
		mov $t190(null) $v3(null)
		MOD $t190(null) $P(null)
		mov $t191(null) $t189(null)
		MUL $t191(null) $t190(null)
		mov $c3(null) $t191(null)
		mov $t192(null) $c3(null)
		AND $t192(null) $INT_MAX(null)
		mov $c3(null) $t192(null)
		mov $t193(null) $v4(null)
		XOR $t193(null) $v5(null)
		mov $t194(null) $t193(null)
		XOR $t194(null) $v6(null)
		mov $t195(null) $v3(null)
		XOR $t195(null) $v2(null)
		mov $t196(null) $t195(null)
		XOR $t196(null) $v1(null)
		cmp $t194(null) $t196(null)
		set LE $t197(null)
		cmp $t197(null) 1
		cjump EQ main.9.if_true
		jump main.10.if_false
	main.9.if_true :
		mov $t198(null) $v1(null)
		ADD $t198(null) $v2(null)
		mov $t199(null) $t198(null)
		AND $t199(null) $INT_MAX(null)
		mov $t200(null) $t199(null)
		MOD $t200(null) $P(null)
		mov $t201(null) $v3(null)
		MOD $t201(null) $P(null)
		mov $t202(null) $t201(null)
		ADD $t202(null) 1
		mov $t203(null) $t200(null)
		MOD $t203(null) $t202(null)
		mov $c4(null) $t203(null)
		jump main.11.if_exit
	main.10.if_false :
		mov $t204(null) $v3(null)
		ADD $t204(null) $v2(null)
		mov $t205(null) $t204(null)
		AND $t205(null) $INT_MAX(null)
		mov $t206(null) $t205(null)
		MOD $t206(null) $P(null)
		mov $t207(null) $v1(null)
		MOD $t207(null) $P(null)
		mov $t208(null) $t207(null)
		ADD $t208(null) 1
		mov $t209(null) $t206(null)
		MOD $t209(null) $t208(null)
		mov $c4(null) $t209(null)
		jump main.11.if_exit
	main.11.if_exit :
		mov $t210(null) $c1(null)
		XOR $t210(null) 10001
		mov $t212(rdi) $t210(null)
		call xorshift10
		mov $t213(null) $t211(rax)
		mov $t214(null) $r1(null)
		ADD $t214(null) $t213(null)
		mov $r1(null) $t214(null)
		mov $t215(null) $c2(null)
		XOR $t215(null) 10002
		mov $t217(rdi) $t215(null)
		call xorshift10
		mov $t218(null) $t216(rax)
		mov $t219(null) $r2(null)
		ADD $t219(null) $t218(null)
		mov $r2(null) $t219(null)
		mov $t220(null) $c3(null)
		XOR $t220(null) 10003
		mov $t222(rdi) $t220(null)
		call xorshift10
		mov $t223(null) $t221(rax)
		mov $t224(null) $r3(null)
		ADD $t224(null) $t223(null)
		mov $r3(null) $t224(null)
		mov $t225(null) $c4(null)
		XOR $t225(null) 10004
		mov $t227(rdi) $t225(null)
		call xorshift10
		mov $t228(null) $t226(rax)
		mov $t229(null) $r4(null)
		ADD $t229(null) $t228(null)
		mov $r4(null) $t229(null)
		jump main.12.loop_next
	main.12.loop_next :
		mov $t230(null) $i(null)
		INC $i(null)
		jump main.1.loop_condition
	main.13.loop_exit :
		mov $t232(rdi) $r1(null)
		call toStringHex
		mov $t233(null) $t231(rax)
		mov $t235(rdi) $t233(null)
		mov $t236(rsi) _string_constant_0
		call _builtin_add
		mov $t237(null) $t234(rax)
		mov $t238(rdi) $t237(null)
		call print
		mov $t240(rdi) $r2(null)
		call toStringHex
		mov $t241(null) $t239(rax)
		mov $t243(rdi) $t241(null)
		mov $t244(rsi) _string_constant_1
		call _builtin_add
		mov $t245(null) $t242(rax)
		mov $t246(rdi) $t245(null)
		call print
		mov $t248(rdi) $r3(null)
		call toStringHex
		mov $t249(null) $t247(rax)
		mov $t251(rdi) $t249(null)
		mov $t252(rsi) _string_constant_2
		call _builtin_add
		mov $t253(null) $t250(rax)
		mov $t254(rdi) $t253(null)
		call print
		mov $t256(rdi) $r4(null)
		call toStringHex
		mov $t257(null) $t255(rax)
		mov $t259(rdi) $t257(null)
		mov $t260(rsi) _string_constant_3
		call _builtin_add
		mov $t261(null) $t258(rax)
		mov $t262(rdi) $t261(null)
		call print
		mov $t263(rdi) _string_constant_4
		call println
		ret 0
		jump main.14.exit
	main.14.exit :
}
func xorshift10(seed) { 
	xorshift10.0.enter :
		mov $seed(null) $t267(rdi)
		mov $x(null) $seed(null)
		mov $t269(rdi) $x(null)
		call xorshift
		mov $t270(null) $t268(rax)
		mov $x(null) $t270(null)
		mov $t272(rdi) $x(null)
		call xorshift
		mov $t273(null) $t271(rax)
		mov $x(null) $t273(null)
		mov $t275(rdi) $x(null)
		call xorshift
		mov $t276(null) $t274(rax)
		mov $x(null) $t276(null)
		mov $t278(rdi) $x(null)
		call xorshift
		mov $t279(null) $t277(rax)
		mov $x(null) $t279(null)
		mov $t281(rdi) $x(null)
		call xorshift
		mov $t282(null) $t280(rax)
		mov $x(null) $t282(null)
		mov $t284(rdi) $x(null)
		call xorshift
		mov $t285(null) $t283(rax)
		mov $x(null) $t285(null)
		mov $t287(rdi) $x(null)
		call xorshift
		mov $t288(null) $t286(rax)
		mov $x(null) $t288(null)
		mov $t290(rdi) $x(null)
		call xorshift
		mov $t291(null) $t289(rax)
		mov $x(null) $t291(null)
		mov $t293(rdi) $x(null)
		call xorshift
		mov $t294(null) $t292(rax)
		mov $x(null) $t294(null)
		mov $t296(rdi) $x(null)
		call xorshift
		mov $t297(null) $t295(rax)
		mov $x(null) $t297(null)
		ret $x(null)
		jump xorshift10.1.exit
	xorshift10.1.exit :
}
func toStringHex(x) { 
	toStringHex.0.enter :
		mov $x(null) $t330(rdi)
		mov $ret(null) _string_constant_6
		mov $i(null) 28
		jump toStringHex.1.loop_condition
	toStringHex.1.loop_condition :
		cmp $i(null) 0
		set GREQ $t331(null)
		cmp $t331(null) 1
		cjump EQ toStringHex.2.loop_body
		jump toStringHex.7.loop_exit
	toStringHex.2.loop_body :
		mov $t332(null) $x(null)
		SHR $t332(null) $i(null)
		mov $t333(null) $t332(null)
		AND $t333(null) 15
		mov $digit(null) $t333(null)
		cmp $digit(null) 10
		set LE $t334(null)
		cmp $t334(null) 1
		cjump EQ toStringHex.3.if_true
		jump toStringHex.4.if_false
	toStringHex.3.if_true :
		mov $t335(null) 48
		ADD $t335(null) $digit(null)
		mov $t337(rdi) $t335(null)
		call int2chr
		mov $t338(null) $t336(rax)
		mov $t340(rdi) $ret(null)
		mov $t341(rsi) $t338(null)
		call _builtin_add
		mov $t342(null) $t339(rax)
		mov $ret(null) $t342(null)
		jump toStringHex.5.if_exit
	toStringHex.4.if_false :
		mov $t343(null) 65
		ADD $t343(null) $digit(null)
		mov $t344(null) $t343(null)
		SUB $t344(null) 10
		mov $t346(rdi) $t344(null)
		call int2chr
		mov $t347(null) $t345(rax)
		mov $t349(rdi) $ret(null)
		mov $t350(rsi) $t347(null)
		call _builtin_add
		mov $t351(null) $t348(rax)
		mov $ret(null) $t351(null)
		jump toStringHex.5.if_exit
	toStringHex.5.if_exit :
		jump toStringHex.6.loop_next
	toStringHex.6.loop_next :
		mov $t352(null) $i(null)
		SUB $t352(null) 4
		mov $i(null) $t352(null)
		jump toStringHex.1.loop_condition
	toStringHex.7.loop_exit :
		ret $ret(null)
		jump toStringHex.8.exit
	toStringHex.8.exit :
}
